TESTS_NUM = 55;
tests = [];
tests.push("print 4\n");
tests.push("a = 0\nprint a\n");
tests.push("a = 0\na = 5\nprint a\na = 'hgjhjg'\nprint a, 6\n");
tests.push("print 'fsdgdh' + 7\n");
tests.push("a = 5\nif a < 5:\n    print 7\n");
tests.push("a = 5\nif a < 6:\n    print 7\n");
tests.push("a = 5\nif a < 7 or a + 4 > 8:\n    print 7\nelse:\n    print 5\n");
tests.push("a = 5\nif a < 7 and a + 4 < 8:\n    print 7\nelse:\n    print 5\n");
tests.push("for cm in ['a', 'b', 'c']:\n    print cm\n");
tests.push("for i in ['a', 'b', 'c']:\n    for j in ['a', 'b', 'c']:\n        print i, j\n");
tests.push("for i in ['a', 'b', 'c']:\n    for j in ['a', 'b', 'c']:\n        if i != j:\n            print i, j\n");
tests.push("i = 0\nwhile i > 3:\n    print i\n");
tests.push("i = 0\nwhile i < 3:\n    print i\n    i += 1\n");
tests.push("i = 0\nwhile i < 3:\n    j = 0\n    while j < 2:\n        print j\n        j += 1\n    print i\n    i += 1\n");
tests.push("for i in ['a', 'b', 'c']:\n    j = 0\n    while j < 2:\n        print i, j\n        j += 1\n");
tests.push("def foo(a):\n    print a\n    \n    \nfoo(1)\n");
tests.push("def foo(a):\n    bar(a)\n    \ndef bar(a):\n    print a\n    \n    \nfoo(1)\n");
tests.push("def foo(a):\n    print bar(a)\n    \ndef bar(a):\n    return a\n    \n    \nfoo(1)\n");
tests.push("def foo(a):\n    return a\n\nprint foo(6)\n");
tests.push("def foo(a):\n    print 1\n    if a < 5:\n        return a\n    else:\n        return a - 2\n\nprint foo(6)\n");
tests.push("def rec(a):\n    print a\n    if a < 2:\n        rec(a + 1)\n    print a\n    \n    \nrec(0)\n");
tests.push("for i in range(3):\n    print i\n");
tests.push("s = set([2,3,4])\nt = set([3,4,5])\nu = set([1,3,5])\n\nprint s\n\ns.difference_update(t)\nu.difference_update(t)\n\nprint s\nprint u\n\nprint s == set([2])\nprint u == set([1])\n\ns = set([2,3,4])\nt = set([3,4,5])\n\nt.difference_update(s, u)\nprint t\nprint t == set([5])\n\n");
tests.push("def default_outside(x=[]):\n    return x\n\na = default_outside()\na.append(1)\nprint a\nb = default_outside()\nb.append(2)\nprint b\n");
tests.push("s = set([2,3,4])\nt = set([3,4,5])\nu = set([1,3,5])\n\na = s.difference(t)\nb = u.difference(s)\nc = u.difference(t)\n\nprint a\nprint b\nprint c\n\nprint a == set([2])\nprint b == set([1,5])\nprint c == set([1])\n\nd = s.difference(t, u)\nprint d\nprint d == set([2])\n\n");
tests.push("s = set([1,2,3])\ncopy_s = s.copy()\nnew_s = set(s)\ncopy_s.add(42)\nnew_s.add(13)\n\nprint s\nprint copy_s\nprint new_s\n");
tests.push("s = set([2,3,4])\nt = set([3,4,5])\nu = set([1,3,5])\n\nprint s\n\ns.intersection_update(t)\nu.intersection_update(t)\n\nprint s\nprint u\n\nprint s == set([3, 4])\nprint u == set([3, 5])\n\nt.intersection_update(s, u)\nprint t\nprint t == set([3])\n\n");
tests.push("s = set([2,3,4])\nt = set([3,4,5])\nu = set([1,3,5])\n\na = s.intersection(t)\nb = u.intersection(s)\nc = u.intersection(t)\n\nprint a\nprint b\nprint c\n\nprint a == set([3, 4])\nprint b == set([3])\nprint c == set([3, 5])\n\nd = s.intersection(t, u)\nprint d\nprint d == set([3])\n\n");
tests.push("s = set([1,2,3])\nt = set([3,4,5])\ns.symmetric_difference_update(t)\nt.symmetric_difference_update(s)\nprint s\nprint s == t\nprint s == set([1,2,4,5])\nprint s == set([1,2,3])\n");
tests.push("s = set([1,2,3])\nt = set([3,4,5])\na = s.symmetric_difference(t)\nb = t.symmetric_difference(s)\nprint a\nprint a == b\nprint a == set([1,2,4,5])\n");
tests.push("# Test set unions\n# sets are un-ordered, though python seems to sort them sometimes...\n# hence the testing for equality to known sets rather than printing.\ns = set([2,3,4])\nt = set([4,5,6])\nu = set([1,2,3,4,5])\nprint s\nprint t\nprint u\nprint '# pair unions'\na = s.union(t)\nb = s.union(u)\nc = t.union(s)\nd = t.union(u)\ne = u.union(s)\nf = u.union(t)\nprint a == c\nprint a == set([2,3,4,5,6])\nprint b == e\nprint b == set([1,2,3,4,5])\nprint d == f\nprint d == set([1,2,3,4,5,6])\n\nprint '# triple unions'\na = s.union(t, u)\nb = s.union(u, t)\nc = t.union(s, u)\nd = t.union(u, s)\ne = u.union(s, t)\nf = u.union(t, s)\n\nprint f\nprint a == set([1,2,3,4,5,6])\nprint a == b\nprint a == c\nprint a == d\nprint a == e\nprint a == f\n\n");
tests.push("# Test the comparison of sets\n\nprint '# actual super & subsets'\n\nsup = set([1,2,3,4,100])\nprint sup\n\nsub = set([2,3,4])\nprint sub\n\nprint '# forwards'\nprint sup.isdisjoint(sub)\nprint sup > sub\nprint sup.issuperset(sub)\nprint sup >= sub\nprint sup == sub\nprint sup != sub\nprint sup.issubset(sub)\nprint sup <= sub\nprint sup < sub\nprint '# backwards'\nprint sub.isdisjoint(sup)\nprint sub > sup\nprint sub.issuperset(sup)\nprint sub >= sup\nprint sub == sup\nprint sub != sup\nprint sub.issubset(sup)\nprint sub <= sup\nprint sub < sup\n");
tests.push("# Test the comparison of sets\nl = [1,2,3,4,1,1]\nprint l\ns = set(l)\nprint s\n\nprint '# equal'\neq = set(l)\n\nprint eq\n\nprint '# forwards'\nprint s.isdisjoint(eq)\nprint s > eq\nprint s.issuperset(eq)\nprint s >= eq\nprint s == eq\nprint s != eq\nprint s.issubset(eq)\nprint s <= eq\nprint s < eq\nprint '# backwards'\nprint eq.isdisjoint(s)\nprint eq > s\nprint eq.issuperset(s)\nprint eq >= s\nprint eq == s\nprint eq != s\nprint eq.issubset(s)\nprint eq <= s\nprint eq < s\n");
tests.push("# Test the behaviour of sets\nl = [1,2,3,4,1,1]\nprint l\ns = set(l)\nprint s\n\n# Test the addition and removal of items of a clone set\nt = set(s)\nprint len(t), t\nprint len(s), s\nt.add(100)\nprint len(t), t\nprint len(s), s\nt.discard(2)\nprint len(t), t\nprint len(s), s\n");
tests.push("# Test that a clone of a list really is distinct\nl = [1,2,3]\nprint l\nm = list(l)\nprint m\nm.pop()\nprint l\nprint m\n");
tests.push("# Tests the list functions.\nl = [1,1,2,3,5,8,13,21]\nprint l\nprint l.count(1)\nprint l.reverse()\nprint l\nprint l.count(1)\nprint l.count(0)\nprint l.count(3)\nprint l.index(5)\nprint l.remove(5)\nprint l.remove(1)\nprint l.count(1)\nprint l\n");
tests.push("def f():\n    print \"in f\"\n    return 10\n\ndef g():\n    print \"in g\"\n    return 20\n\nretval = True\n\ndef h():\n    global retval\n    retval = not retval\n    return retval\n\nfor i in range(3):\n    print f() if h() else g()\n");
tests.push("print \"Yes\" if True else \"No\"\nprint \"Yes\" if False else \"No\"\n");
tests.push("x = []\nx.append(x)\nprint({x:'OK'}[x])\n");
tests.push("def test(y='K',x='Z'): print(x+y)\ntest('O')\n");
tests.push("def test(): pass\nx = 1\nprint test()\n");
tests.push("xyzy = [100,101,102,103,104,105,106,107]\ndel xyzy\nprint xyzy\n");
tests.push("x = {\"hi\": \"there\", \"yo\": \"I'm a dawg\"}\nprint x.items()\nprint x.keys()\nprint x.values()\n");
tests.push("print [x for x in range(1,10) if False] or [\"hello\" for x in range(1,10) if True]\n");
tests.push("print \"abc\"[1.5]\n");
tests.push("for const in (1,2,3):\n    print const\n\ndef f():\n    for const in (1,2,3):\n        print const\n    for object in (1,2,3):\n        print object\n    instanceof = 5\n    void = 6\n    var = 7\n    delete = 8\n    switch = 9\n    default = 10\n    catch = 11\n    print instanceof, void, var, delete, switch, default, catch\nf()\n");
tests.push("# free and cell vars in y\n\nc = \"squirrel\"\ndef x():\n    b = \"dog\"\n    print b, c\n    def y():\n        a = \"cat\"\n        print a,b\n        def z():\n            return a,b,c\n        return z\n    return y()\nprint x()()\n");
tests.push("v = [3,2,1]\nv.sort()\nprint v[0]\n");
tests.push("def wee(waa, woo=True, wii=False):\n    print waa, woo, wii\nwee(\"OK\")\n");
tests.push("def func():\n    return \"dog\"\ndef wee():\n    assert 1 != 2\n    assert \"dog\" == func()\n\nwee()\n");
tests.push("a = (1 for x in range(3))\nprint a\nfor i in a:\n    print i\n");
tests.push("def f():\n    a = \"dog\"\n    print \"f\", a\n    def g():\n        a = \"cat\"\n        print \"g\", a\n    g()\n    print \"f2\", a\n    def h():\n        print \"h\",a\n    h()\n\nf()\n");
tests.push("print [c for c in \"asdf\"]\n");
tests.push("print range(10)[slice(0, 5, 2)]\n");
tests.push("x = []\nx.append(x)\nprint({x:'OK'}[x])\n");
